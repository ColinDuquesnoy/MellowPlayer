include(${CMAKE_SOURCE_DIR}/cmake/Macros.cmake)

set(LIB_NAME "${PROJECT_NAME}.Infrastructure")

glob_recurse_excl(SOURCE_FILES *.cpp "Linux/;Windows/;OSX/")
glob_recurse_excl(HEADER_FILES *.hpp "Linux/;Windows/;OSX/")

if (WIN32)
    file(GLOB_RECURSE UPDATER_SOURCE_FILES Updater/Windows/*.cpp)
    file(GLOB_RECURSE UPDATER_HEADER_FILES Updater/Windows/*.hpp)
elseif(APPLE)
    file(GLOB_RECURSE UPDATER_SOURCE_FILES Updater/OSX/*.cpp)
    file(GLOB_RECURSE UPDATER_HEADER_FILES Updater/OSX/*.hpp)
elseif(UNIX)
    file(GLOB_RECURSE UPDATER_SOURCE_FILES Updater/Linux/*.cpp)
    file(GLOB_RECURSE UPDATER_HEADER_FILES Updater/Linux/*.hpp)
endif()
set(SOURCE_FILES ${SOURCE_FILES} ${UPDATER_SOURCE_FILES})
set(HEADER_FILES ${HEADER_FILES} ${UPDATER_HEADER_FILES})

if (NOT qxtglobalshortcut_FOUND)
    include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/3rdparty/libqxt/src/core)
    include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/3rdparty/libqxt/src/widgets/)
endif()
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/3rdparty/spdlog-0.11.0/include/)

add_library(${LIB_NAME} STATIC ${SOURCE_FILES} ${HEADER_FILES} infrastructure.qrc ${BUILD_CONFIG_SOURCE})
target_link_libraries(${LIB_NAME} ${PROJECT_NAME}.Domain
                      Qt5::Concurrent Qt5::Core Qt5::Widgets Qt5::Network Qt5::Sql qxtglobalshortcut)
if(UNIX AND NOT APPLE)
    target_link_libraries(${LIB_NAME} Qt5::DBus)
endif()
if (USE_PRECOMPILED_HEADER)
    set_target_properties(${LIB_NAME} PROPERTIES COTIRE_CXX_PREFIX_HEADER_INIT "stdafx.hpp")
    set_target_properties(${LIB_NAME} PROPERTIES COTIRE_ADD_UNITY_BUILD FALSE)
    cotire(${LIB_NAME})
endif()
