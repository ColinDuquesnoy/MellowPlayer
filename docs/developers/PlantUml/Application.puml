@startuml

namespace MellowPlayer.Main {
    class Program {
        + main(): int
        + onInitialized()
        + onStarted()

    }
    Program --> MellowPlayer.Infrastructure.IApplication
    Program --> MellowPlayer.Presentation.IContextProperties
    Program --> MellowPlayer.Presentation.IMainWindow
    Program --> MellowPlayer.Presentation.IMprisPlayer
    Program -up-> MellowPlayer.Domain.IPlayers
    Program --> MellowPlayer.Infrastructure.IUpdater
}

namespace MellowPlayer.Domain {
    interface IPlayers
}

namespace MellowPlayer.Infrastructure {
    interface IUpdater

    interface IApplication #PaleGreen {
        initialized: signal<void>
        started: signal<bool>
        initialize()
        run()
        quit()
        restart()
    }

    class ApplicationDecorator #PaleGreen {
        + initialized: signal<void>
        + started: signal<bool>
        # _application: IApplication
        + initialize()
        + run()
        + quit()
        + restart()
    }

    IApplication <|.. ApplicationDecorator

    class SingleInstance {
        + initialize()
        + run()
    }
    ApplicationDecorator <|-- SingleInstance

    class WithCommandLineArguments #PaleGreen {
        + run()
    }
    ApplicationDecorator <|-- WithCommandLineArguments

    class WithLogging #PaleGreen {

    }
    ApplicationDecorator <|-- WithLogging
}

namespace MellowPlayer.Presentation {
    interface IQtApplication #PaleGreen {
    }
    class QtApplication #PaleGreen {

    }
    IQtApplication <|-- QtApplication
    class Application #PaleGreen {
        + quitRequested: signal<void>
        + requestQuit()
        --
        + name: QString
        + asQObject(): QObject*
        --
        + initialize()
        + run()
        + quit()
        + restart()
    }
    MellowPlayer.Infrastructure.IApplication <|.. Application
    ContextProperty <|.. Application
    Application -down-> IQtApplication

    interface IQmlApplicationEngine #PaleGreen {
        setContextProperty(QString, QObject*)
        addImportPath(QString)
        load(QUrl)
    }
    class QmlApplicationEngine #PaleGreen {
        - _qQmlApplicationEngine: QQmlApplicationEngine
        + setContextProperty(QString, QObject*)
        + addImportPath(QString)
        + load(QUrl)
    }
    IQmlApplicationEngine <|.. QmlApplicationEngine

    interface IContextProperty #PaleGreen {
        name: QString
        asQObject(): QObject*
    }

    class ContextProperty #PaleGreen {
        + ContextProperty(IContextProperties)
    }
    IContextProperty <|.. ContextProperty
    ContextProperty .up.> IContextProperties

    interface IContextProperties #PaleGreen {
        add(IContextProperty)
    }

    class ContextProperties #PaleGreen {
        + add(IContextProperty)
    }
    IContextProperties <|.. ContextProperties
    ContextProperties --> IQmlApplicationEngine

    interface IMainWindow {
        show()
        hide()
        close()
    }

    class MainWindow {
        + name: QString
        + asQObject(): QObject*
        --
        + show()
        + hide()
        + close()
    }
    IMainWindow <|... MainWindow
    ContextProperty <|-- MainWindow

    interface IMprisPlayer {
        start()
    }
    class MprisPlayer {
        + start()
    }
    IMprisPlayer <|-- MprisPlayer

    class NullMprisPlayer {
        + start()
    }
    IMprisPlayer <|-- NullMprisPlayer
}


'note bottom
'
'int main(argc, argv) {
'    QApplication qtApp(argc, argv); // bound by instance in injector
'    // dependency injector setup
'    ...
'    auto applicationFactory = injector.create<IApplicationFactory>();
'    auto app = applicationFactory.create();
'    return app->run();
'}
'
'end note

@enduml
